name: C++ CI Serial Programs

on: [push, pull_request, workflow_dispatch]

env: 
  USERNAME: PokemonAutomation
  VCPKG_EXE: ${{ github.workspace }}/Arduino-Source/vcpkg/vcpkg
  FEED_URL: https://nuget.pkg.github.com/PokemonAutomation/index.json
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/PokemonAutomation/index.json,readwrite"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-2025, macos-13, ubuntu-24.04]
        compiler: ['default', 'clang']
        qt_version: ['6.9.2']
        include:
          - qt_version: '6.9.2'
            qt_version_major: '6'
            qt_modules: 'qtmultimedia qtserialport'

          - os: 'windows-2025'
            compiler: 'clang'
            cmake_additional_param: '-T ClangCL'

          - os: 'ubuntu-24.04'
            compiler: 'clang'
            cmake_additional_param: '-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++'

        exclude:
          - os: 'macos-13'
            compiler: 'clang'
            # Excluded because macos default toolset is already clang

    steps:
    - uses: actions/checkout@v4
      with:
        path: Arduino-Source
        submodules: 'recursive'
    - uses: actions/checkout@v4
      with:
        repository: 'PokemonAutomation/Packages'
        path: Packages
    - uses: jurplel/install-qt-action@v4
      with:
        version: ${{ matrix.qt_version }}
        modules: ${{ matrix.qt_modules }}
    - name: Install dependencies
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt update
        sudo apt upgrade

        echo Install dependencies for openssl
        sudo apt install linux-libc-dev
        
        echo Install dependencies for cairo
        sudo apt install libx11-dev libxft-dev libxext-dev
        
        echo Install dependencies for libepoxy
        sudo apt install libx11-dev libgles2-mesa-dev
        
        echo Install dependencies for libxcrypt
        sudo apt install libltdl-dev
        
        echo Install dependencies for libsystemd
        sudo ${{ env.pythonLocation }}/bin/python3 -m pip install jinja2
        
        echo Install dependencies for at-spi2-core
        sudo apt install libxi-dev libxtst-dev

        echo Install dependencies for gtk3
        sudo apt install libxrandr-dev
        
        sudo apt install autoconf automake libtool mono-complete
    - name: Install dependencies
      if: startsWith(matrix.os, 'mac')
      run: |
        brew install automake onnxruntime
    - name: Vcpkg setup
      run: |
        cd Arduino-Source
        git submodule foreach git fetch --unshallow || true
    - name: Bootstrap vcpkg
      if: startsWith(matrix.os, 'windows')
      run: |
        ${{ github.workspace }}/Arduino-Source/vcpkg/bootstrap-vcpkg.bat
        .$(${{ env.VCPKG_EXE }} fetch nuget) `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        .$(${{ env.VCPKG_EXE }} fetch nuget) `
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"
    - name: Bootstrap vcpkg
      if: startsWith(matrix.os, 'windows') != true
      run: |
        ${{ github.workspace }}/Arduino-Source/vcpkg/bootstrap-vcpkg.sh
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          sources add \
          -Source "${{ env.FEED_URL }}" \
          -StorePasswordInClearText \
          -Name GitHubPackages \
          -UserName "${{ env.USERNAME }}" \
          -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
        mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" \
          -Source "${{ env.FEED_URL }}"
    - name: Generate binaries
      run: |
        cd Arduino-Source/SerialPrograms
        mkdir bin
        cd bin
        cmake .. -DQT_MAJOR:STRING=${{ matrix.qt_version_major }} ${{ matrix.cmake_additional_param }} -DCMAKE_TOOLCHAIN_FILE="../../vcpkg/scripts/buildsystems/vcpkg.cmake"
        cmake --build . --config Release --parallel 10
    - name: Copy resources
      if: startsWith(matrix.os, 'windows')
      run: |
        robocopy Packages/SerialPrograms/Resources          Output/Resources /s
        robocopy Packages/PABotBase/PABotBase-Switch        Output/PABotBase /s
        robocopy Arduino-Source/SerialPrograms/bin          Output/Binaries *.dll
        robocopy Arduino-Source/SerialPrograms/bin/Release  Output/Binaries *.dll
        robocopy Arduino-Source/SerialPrograms/bin/Release  Output/Binaries SerialPrograms.exe
        echo https://github.com/${{github.repository}}/commit/${{github.sha}} > Output/version.txt
        write-host "Robocopy exited with exit code:" $lastexitcode
        if ($lastexitcode -eq 1)
        {
          exit 0
        }
        else
        {
          exit 1
        }
    - uses: actions/upload-artifact@v4
      if: startsWith(matrix.os, 'windows')
      with:
        name: Serial Programs (os=${{ matrix.os }} - compiler=${{ matrix.compiler }} - qt_version=${{ matrix.qt_version }})
        path: Output
